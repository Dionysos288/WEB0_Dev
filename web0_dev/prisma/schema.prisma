datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ProjectStatus {
  progress
  rejected
  pending
  completed
}

enum PhaseStatus {
  Completed
  Active
  Not_Started
}

enum ClientStatus {
  Leads
  Contacted
  Opportunity
  Client
}

enum ClientSource {
  Mail
  Call
  Socials
  Events
  Referral
  Website
  Other
}

enum TaskStatus {
  Backlog
  In_Progress
  Completed
}

enum libraryComponent {
  imageV1
  imageV2
  color
  codefull
  codeSplit
}

model LibraryType {
  id         String     @id @default(cuid())
  name       String     @unique
  slug       String     @unique
  libraries  Library[]
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Library {
  id            String           @id @default(cuid())
  title         String
  description   String?
  url           String?
  libraryTypeId String
  component     libraryComponent
  type          LibraryType      @relation(fields: [libraryTypeId], references: [id])
  favorite      Boolean          @default(false)
  tags          String[]
  projectId     String?
  Project       Project?         @relation(fields: [projectId], references: [id])
  categoryId    String?
  Category      Category?        @relation(fields: [categoryId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Category {
  id            String       @id @default(cuid())
  name          String       @unique
  slug          String       @unique
  parentId      String?
  parent        Category?    @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories Category[]   @relation("CategoryHierarchy")
  libraries     Library[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  LibraryType   LibraryType? @relation(fields: [libraryTypeId], references: [id])
  libraryTypeId String?
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
  priority    Int
  status      TaskStatus
  phaseId     String?
  Phase       Phase?     @relation(fields: [phaseId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String?
  start       DateTime
  due         DateTime
  team        String[]
  status      ProjectStatus
  budget      Decimal
  tasks       Task[]
  completed   Int
  phases      Phase[]
  Files       File[]
  Library     Library[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Phase {
  id          String      @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  status      PhaseStatus
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id])
  tasks       Task[]
  files       File[]
  revisions   Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model File {
  id          String   @id @default(cuid())
  name        String
  url         String
  description String
  size        Decimal
  uploader    String
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  phaseId     String?
  Phase       Phase?   @relation(fields: [phaseId], references: [id])
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model Client {
  id        String       @id @default(cuid())
  name      String
  category  String
  email     String
  status    ClientStatus
  company   String
  source    ClientSource
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Note {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String?
  folderId    String?
  folder      Folder?  @relation(fields: [folderId], references: [id])
  emoji       String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  emoji     String   @default("")
  notes     Note[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
