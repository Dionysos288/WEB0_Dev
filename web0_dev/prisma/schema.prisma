datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ProjectStatus {
  progress
  rejected
  pending
  completed
}

enum PhaseStatus {
  Completed
  Active
  Not_Started
}

enum ClientStatus {
  Leads
  Contacted
  Opportunity
  Client
}

enum ClientSource {
  Mail
  Call
  Socials
  Events
  Referral
  Website
  Other
}

enum TaskStatus {
  Backlog
  In_Progress
  Completed
}

enum libraryComponent {
  imageV1
  imageV2
  color
  codefull
  codeSplit
}

model LibraryType {
  id         String     @id @default(cuid())
  name       String     @unique
  slug       String     @unique
  libraries  Library[]
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Library {
  id            String  @id @default(cuid())
  title         String
  description   String?
  url           String?
  libraryTypeId String

  component      libraryComponent
  type           LibraryType      @relation(fields: [libraryTypeId], references: [id])
  favorite       Boolean          @default(false)
  tags           String[]
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  projectId      String?
  Project        Project?         @relation(fields: [projectId], references: [id])
  categoryId     String?
  Category       Category?        @relation(fields: [categoryId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Category {
  id             String       @id @default(cuid())
  name           String       @unique
  slug           String       @unique
  parentId       String?
  parent         Category?    @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories  Category[]   @relation("CategoryHierarchy")
  libraries      Library[]
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  LibraryType    LibraryType? @relation(fields: [libraryTypeId], references: [id])
  libraryTypeId  String?
}

model Task {
  id             String        @id @default(cuid())
  title          String
  description    String?
  projectId      String
  project        Project       @relation(fields: [projectId], references: [id])
  priority       Int
  status         TaskStatus
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  phaseId        String?
  Phase          Phase?        @relation(fields: [phaseId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Project {
  id             String        @id @default(cuid())
  title          String
  description    String?
  start          DateTime
  due            DateTime
  team           String[]
  status         ProjectStatus
  organizationId String
  Organization   Organization  @relation(fields: [organizationId], references: [id])
  budget         Decimal
  tasks          Task[]
  completed      Int
  phases         Phase[]
  Files          File[]
  Library        Library[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Phase {
  id             String        @id @default(cuid())
  title          String
  description    String
  startDate      DateTime
  endDate        DateTime
  status         PhaseStatus
  projectId      String
  project        Project       @relation(fields: [projectId], references: [id])
  tasks          Task[]
  files          File[]
  revisions      Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model File {
  id             String        @id @default(cuid())
  name           String
  url            String
  description    String
  size           Decimal
  uploader       String
  projectId      String
  project        Project       @relation(fields: [projectId], references: [id])
  phaseId        String?
  Phase          Phase?        @relation(fields: [phaseId], references: [id])
  updatedAt      DateTime      @updatedAt
  createdAt      DateTime      @default(now())
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Client {
  id             String       @id @default(cuid())
  name           String
  category       String
  email          String
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  status         ClientStatus
  company        String
  source         ClientSource
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Note {
  id             String       @id @default(cuid())
  title          String
  description    String?
  content        String?
  folderId       String?
  folder         Folder?      @relation(fields: [folderId], references: [id])
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  emoji          String       @default("")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Folder {
  id             String       @id @default(cuid())
  name           String
  emoji          String       @default("")
  notes          Note[]
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  members     Member[]
  invitations Invitation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?
  organizationSlug     String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]
  Folder      Folder[]
  Note        Note[]
  Client      Client[]
  File        File[]
  Phase       Phase[]
  Project     Project[]
  Task        Task[]
  Category    Category[]
  Library     Library[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}
